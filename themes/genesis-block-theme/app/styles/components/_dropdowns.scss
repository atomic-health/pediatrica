////
/// Dropdown menu
/// @group components
/// @author Dami√°n Muti
////

///
$suit-dropdown-animation: fade !default;
///
$suit-dropdown-event: hover !default;
///
$suit-dropdown-position: left !default;
///
$suit-dropdown-style: true !default;
///
$suit-dropdown-width: 100% !default;
///
$suit-dropdown-background-color: white !default;
///
$suit-dropdown-link-color: #fff !default;

/// This is a CSS dropdown component that handles different triggering events and animation styles.
/// @param {string} $animation [fade] - Animation style in which the list is going to be shown. Accepted values: `fade`, `slide-down`, or `none`.
/// @param {string} $event [hover] - Trigger event to show the list. Accepted values: `hover`, `focus`, or `none`.
/// @param {string} $position [left] - List position once is visible. Accepted values: `left`, or `right`.
/// @param {bool} $style [true] - Whether to include styles for the button and list or not.
/// @example scss - Using the mixin
///   @include c-dropdown(focus, fade, left, true);
/// @example markup - HTML structure
///   <div class="c-dropdown">
///     <button class="button c-dropdown__button">Dropdown</button>
///     <ul class="c-dropdown__items">
///       <li><a href="#">First item</a></li>
///       <li><a href="#">Second item</a></li>
///       <li><a href="#">Third item</a></li>
///     </nav>
///   </div>

@mixin c-dropdown($event: $suit-dropdown-event, $animation: $suit-dropdown-animation, $position: $suit-dropdown-position, $style: $suit-dropdown-style) {
  @if not index(focus hover, $event) {
    @error "Event must be either `focus` or `hover`.";
  }
  @if not index(fade slide-down none, $animation) {
    @error "Animation must be either `fade`, `slide-down` or `none`.";
  }
  @if not index(left right, $position) {
    @error "Position must be either `left` or `right`.";
  }
  @if type-of($style) != bool {
    @error "Style must be either `true` or `false`.";
  }

  // Placeholder to provide the active styling without repeating code
  %c-dropdown--active {
    max-height: 1000px; // Random value to max-height can be animated as height property
    visibility: visible;
    opacity: 1;
  }

  .c-dropdown {
    position: relative;
    display: inline-block;

    &__input {
      position: relative;
      width: 100%;
      height: 36px;
      padding: 0 35px 0 10px;
      border: none;
      border-bottom: 1px solid black;
      font-family: $suit-font-family--condensed;
      font-size: 18px;
      font-weight: 500;
      text-transform: uppercase;
      text-overflow: ellipsis;
      background: transparent;
      color: tint($suit-font-color-dark, 50%);
      cursor: pointer;
      outline: none;
    }

    .select__caret {
      position: absolute;
      top: 14px;
      right: 10px;
      display: block;
      width: 17px;
      height: 9px;
      font-size: 8px;
      color: black;
      transition: transform $suit-transition-duration $suit-transition-timing;
    }

    &__items {
      position: absolute;
      #{$position}: 0;
      z-index: 100;
      display: block;
      overflow: hidden;
      width: $suit-dropdown-width;
      max-height: 0;
      margin: 0;
      padding: 10px 12px;
      list-style: none;
      border: 1px solid black;
      opacity: 0;
      visibility: hidden;

      // Different transitions depending on the animation type
      @if $animation == fade {
        transition: opacity $suit-transition-duration $suit-transition-timing;
      }
      @else if $animation == slide-down {
        transition: max-height 0.75s ease-in-out; // Global variables not used here to improve interaction for max-height transition
      }

      // If true, add styles to the list
      @if $style == true {
        border-radius: 0;
        background-color: $suit-dropdown-background-color;

        li {
          @include c-form-radio-checkbox('checkbox');

          &:before {
            display: none;
          }
        }
      }
    }

    // If true, include styles for the button
    @if $style == true {
      @include c-button();

      &__input {
        margin-bottom: 15px;
      }
    }

    // Trigger different events depending on the event parameter
    @if $event == focus {
      &__input {
        &:#{$event} {
          + .c-dropdown__items {
            @extend %c-dropdown--active;
          }
        }
      }
    }
    @else if $event == hover {
      &:#{$event} {
        .select__caret {
          transform: rotate(180deg);
          transform-origin: center;
          
        }

        > .c-dropdown__items {
          @extend %c-dropdown--active;
        }
      }
    }
  }
}